<?xml version="1.0" encoding="UTF-8"?>

<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:aop="http://www.springframework.org/schema/aop" 
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:jee="http://www.springframework.org/schema/jee"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/beans 
						http://www.springframework.org/schema/beans/spring-beans.xsd
						http://www.springframework.org/schema/aop 
						http://www.springframework.org/schema/aop/spring-aop.xsd
						http://www.springframework.org/schema/context 
						http://www.springframework.org/schema/context/spring-context.xsd
						http://www.springframework.org/schema/jee 
						http://www.springframework.org/schema/jee/spring-jee-3.0.xsd
						http://www.springframework.org/schema/tx 
						http://www.springframework.org/schema/tx/spring-tx.xsd
	">
	<!-- sql会话模版 -->
	<bean id="sqlSessionTemplate_pecr" class="org.mybatis.spring.SqlSessionTemplate" scope="prototype">
		<constructor-arg ref="sqlSessionFactory_pecr" />
	</bean>
	<!-- 配置mybatis -->
	<bean id="sqlSessionFactory_pecr" class="org.mybatis.spring.SqlSessionFactoryBean">
    	<property name="dataSource" ref="dataSource_pecr" />
        <property name="configLocation" value="classpath:mybatis/mybatis-config.xml"></property>
        <!-- mapper扫描 -->
        <property name="mapperLocations" value="classpath:mybatis/pecr/**/*.xml"></property>
        <property name="databaseIdProvider" ref="databaseIdProvider" />
    </bean>
    
	<!-- 阿里 druid数据库连接池 -->
	<bean id="dataSource_pecr" class="com.alibaba.druid.pool.DruidDataSource" destroy-method="close">  
         <!-- 数据库基本信息配置 -->
         <property name="url" value="${pecr_url}" />  
         <property name="username" value="${pecr_username}" />  
         <property name="password" value="${pecr_password}" />  
         <property name="driverClassName" value="${pecr_driverClassName}" />  
         <property name="filters" value="${pecr_filters}" />  
   		 <!-- 最大并发连接数 -->
         <property name="maxActive" value="${pecr_maxActive}" />
         <!-- 初始化连接数量 -->
         <property name="initialSize" value="${pecr_initialSize}" />
         <!-- 配置获取连接等待超时的时间 -->
         <property name="maxWait" value="${pecr_maxWait}" />
         <!-- 最小空闲连接数 -->
         <property name="minIdle" value="${pecr_minIdle}" />  
   		 <!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
         <property name="timeBetweenEvictionRunsMillis" value="${pecr_timeBetweenEvictionRunsMillis}" />
         <!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
         <property name="minEvictableIdleTimeMillis" value="${pecr_minEvictableIdleTimeMillis}" />  
         <property name="validationQuery" value="${pecr_validationQuery}" />  
         <property name="testWhileIdle" value="${pecr_testWhileIdle}" />  
         <property name="testOnBorrow" value="${pecr_testOnBorrow}" />  
         <property name="testOnReturn" value="${pecr_testOnReturn}" />  
         <property name="maxOpenPreparedStatements" value="${pecr_maxOpenPreparedStatements}" />
         <!-- 打开removeAbandoned功能 -->
         <property name="removeAbandoned" value="${pecr_removeAbandoned}" />
         <!-- 1800秒，也就是30分钟 -->
         <property name="removeAbandonedTimeout" value="${pecr_removeAbandonedTimeout}" />
         <!-- 关闭abanded连接时输出错误日志 -->   
         <property name="logAbandoned" value="${pecr_logAbandoned}" />
         <property name="connectionProperties" value="config.decrypt=false;config.decrypt.key=${pecr_publickey}" /> 
	</bean>  
	<!-- 声明式事物处理启用 -->
	<tx:annotation-driven transaction-manager="transactionManager" order="0"/>
	
	<aop:config>
	 	<!-- 多个目录时，可以采取下面的配置 -->
		<aop:pointcut id="pc_pecr" expression="(execution(* com.dcits.supervise.bfd.service..*(..)) or execution(* com.dcits.supervise.pecr.*.service..*(..)))" />
		<aop:advisor pointcut-ref="pc_pecr" advice-ref="txAdvice_pecr" order="1"/>
	</aop:config>
	
	<tx:advice id="txAdvice_pecr" transaction-manager="transactionManager">
		<tx:attributes>
			<tx:method name="delete*" propagation="REQUIRED" read-only="false" 
			           rollback-for="java.lang.Exception"/>
			<tx:method name="insert*" propagation="REQUIRED" read-only="false" 
			           rollback-for="java.lang.Exception" />
			<tx:method name="update*" propagation="REQUIRED" read-only="false" 
			           rollback-for="java.lang.Exception" />
			<tx:method name="save*" propagation="REQUIRED" read-only="false" 
			           rollback-for="java.lang.Exception" />
			<tx:method name="query*" propagation="REQUIRED" read-only="false" 
			           rollback-for="java.lang.Exception" />
			<tx:method name="execute*" propagation="REQUIRED" read-only="false" 
			           rollback-for="java.lang.Exception" />
			<tx:method name="processing*" propagation="REQUIRED" read-only="false" 
			           rollback-for="java.lang.Exception" />
		</tx:attributes>
	</tx:advice>
	<bean name="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">   
    	<property name="dataSource" ref="dataSource_pecr"></property>
 	</bean>
 	
 	<bean id="vendorProperties"
          class="org.springframework.beans.factory.config.PropertiesFactoryBean">
        <property name="properties">
            <props>
                <prop key="Oracle">oracle</prop>
                <prop key="MySQL">mysql</prop>
                <prop key="DB2">db2</prop>
            </props>
        </property>
    </bean>
    <bean id="databaseIdProvider" class="org.apache.ibatis.mapping.VendorDatabaseIdProvider">
        <property name="properties" ref="vendorProperties"/>
    </bean>
    
</beans>
