<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="PersonalPanelDataMapper">
    <cache/>
    <select id="findReportStatistics" parameterType="page" resultType="map">
        SELECT A.EXTRACTION_DATE,
        A.TOTAL_COUNT,
        A.CHECK_ERROR_COUNT,
        A.AWAIT_GENERATE_COUNT,
        A.AWAIT_REPORT_COUNT,
        A.AWAIT_FEEDBACK_COUNT,
        A.FEEDBACK_ERROE_PENDING
        FROM (  
        <if test="_databaseId == 'oracle' ">
         SELECT ROWNUM NO, B.*
	        FROM I_Panel_Data B
	        ORDER BY B.EXTRACTION_DATE DESC
        </if>
        <if test="_databaseId == 'db2'">
         SELECT ROW_NUMBER() over() as NO, B.*
	        FROM I_Panel_Data B
	        ORDER BY B.EXTRACTION_DATE DESC
        </if>
        <if test="_databaseId == 'mysql'">
         SELECT (SELECT @ROWNUM:=@ROWNUM + 1 FROM (SELECT @ROWNUM:=0)T) AS NO,B.*
            FROM I_Panel_Data B
	        ORDER BY B.EXTRACTION_DATE DESC
        </if>
        ) A
        WHERE a.NO &gt; (#{page} - 1) * #{limit}  and NO &lt;= #{page} * #{limit}
    </select>

    <select id="findLineChartData" resultType="map">
        select * from (
        	SELECT (SELECT @ROWNUM:=@ROWNUM + 1 FROM (SELECT @ROWNUM:=0)t) as ROWNUM,
	        EXTRACTION_DATE,
	        REPORTED,
	        REPORTED_SUCCESS
	        FROM I_Panel_Data
        ) t
        WHERE ROWNUM &lt;= 8
        ORDER BY EXTRACTION_DATE DESC
    </select>

    <select id="findBarData" resultType="map">
        select I_BS_TOTAL,
        I_BS_REPORTED,
        I_EFCT_TOTAL,
        I_EFCT_REPORTED,
        I_FAL_MMBS_TOTAL,
        I_FAL_MMBS_REPORTED,
        I_CTRCT_BS_TOTAL,
        I_CTRCT_BS_REPORTED,
        I_GUAR_ACCT_TOTAL,
        I_GUAR_ACCT_REPORTED,
        I_JDACCT_TOTAL,
        I_JDACCT_REPORTED
        from I_PANEL_BAR_DATA 
        where
            <if test="_databaseId == 'oracle' or _databaseId == 'db2'">
                EXTRACTION_DATE = TO_CHAR(SYSDATE,'YYYY-MM-DD')
            </if>
            <if test="_databaseId == 'mysql'">
                EXTRACTION_DATE = date_format(NOW(),'%Y-%m-%d')
            </if>
          
    </select>

    <select id="findTotalData" parameterType="string" resultType="int" statementType="STATEMENT">
        select sum(count) from (select count(1) as count from ${_parameter} 
        where 
            <if test="_databaseId == 'mysql'">
                rpt_date = date_format(now(),'%Y-%m-%d')
            </if>
            <if test="_databaseId == 'oracle' or _databaseId == 'db2'">
                rpt_date = to_char(sysdate,'yyyy-mm-dd')
            </if>
         union
        select count(1) as count from ${_parameter} 
        where 
            <if test="_databaseId == 'mysql'">
                rpt_date = date_format(now(),'%Y-%m-%d')
            </if>
            <if test="_databaseId == 'oracle' or _databaseId == 'db2'">
                rpt_date = to_char(sysdate,'yyyy-mm-dd')
            </if>
            ) a
    </select>

    <select id="findReportedData" parameterType="string" resultType="int" statementType="STATEMENT">
        select sum(count) from (select count(1) as count from ${_parameter} 
        where 
            <if test="_databaseId == 'mysql'">
                RPT_DATE = date_format(now(),'%Y-%m-%d')
            </if>
            <if test="_databaseId == 'oracle' or _databaseId == 'db2'">
                 RPT_DATE = to_char(sysdate,'yyyy-mm-dd')
            </if>
            and BUSINESS_STATES in ('60','70','80') 
        union
        select count(1) as count from ${_parameter} 
        where 
             <if test="_databaseId == 'mysql'">
                RPT_DATE = date_format(now(),'%Y-%m-%d')
            </if>
            <if test="_databaseId == 'oracle' or _databaseId == 'db2'">
                 RPT_DATE = to_char(sysdate,'yyyy-mm-dd')
            </if>
             and BUSINESS_STATES in ('60','70','80')) a
    </select>

    <insert id="addBarRecord" parameterType="map">
         <if test="_databaseId == 'mysql'">
             insert into ${tName}
	        <foreach collection="paramMap.keys" item="key" separator="," open="(" close=")">
	            ${key}
	        </foreach>
	        values
             <foreach collection="paramMap.keys" item="key" open="(" separator="," close=")">
                 #{paramMap[${key}]}  <!-- 值通过 #{ } 参数化处理 -->
             </foreach>
         </if>
          <if test="_databaseId == 'oracle' or _databaseId == 'db2' ">
               insert into ${tName}
		        <foreach collection="paramMap.keys" item="key" separator="," open="(" close=")">
		            ${key}
		        </foreach>
		        values
		        <foreach collection="paramMap.entrySet()" item="val" separator="," open="(" close=")">
		            ${val}
		        </foreach>
          </if>
        
    </insert>

    <select id="hasRecord" parameterType="string" resultType="int" statementType="STATEMENT">
        select count(1) from  ${_parameter} 
        where
            <if test="_databaseId == 'mysql'">
                EXTRACTION_DATE=date_format(now(),'%Y-%m-%d')
            </if> 
            <if test="_databaseId == 'oracle' or _databaseId == 'db2' ">
                EXTRACTION_DATE=to_char(sys_date,'YYYY-MM-DD')
            </if> 
        
    </select>

    <update id="updateBarRecord" parameterType="map">
        update ${tName} set
        <foreach collection="paramMap.entrySet()" index="key" item="val" separator=",">
            ${key}=#{val}
        </foreach>
        where 
            <if test="_databaseId == 'mysql'">
                EXTRACTION_DATE=date_format(NOW(),'%Y-%m-%d')
            </if>
            <if test="_databaseId == 'oracle' or _databaseId == 'db2'">
                EXTRACTION_DATE=to_char(sysdate,'yyyy-mm-dd')
            </if>
    </update>

    <select id="getStatData" parameterType="map" resultType="int">
        select count(1) as count from ${tName} where 
        <if test="_databaseId == 'mysql'">
        	RPT_DATE = date_format(NOW(),'%Y-%m-%d')
        </if>
         <if test="_databaseId == 'db2' or _databaseId == 'oracle' ">
        	RPT_DATE = to_char(sysdate,'yyyy-mm-dd')
        </if>
        
        <choose>
            <when test="condition != null and condition.size > 0 ">
                and BUSINESS_STATES in
                <foreach collection="condition" item="val" separator="," open="(" close=")">
                    #{val}
                </foreach>
            </when>
        </choose>
    </select>

    <select id="getTotalCount" parameterType="string" resultType="int">
        select count(1) as count from ${_parameter}
    </select>

    <!--获取个人正常报文待生成条数-->
    <!--获取个人特殊报文待生成条数-->

    <!--获取个人正常报文待报送条数-->
    <!--获取个人特殊报文待报送条数-->

    <!--获取个人正常报文待反馈条数-->
    <!--获取个人特殊报文待反馈条数-->
    <select id="getNormalPacketToDoCount" parameterType="page" resultType="java.util.HashMap">
        SELECT SUM(normalToGen)      NORMALTOGEN,
               SUM(normalToRep)      NORMALTOREP,
               SUM(normalToFeed)     NORMALTOFEED
          FROM (SELECT COUNT(CASE WHEN BUSINESS_STATES = '30' THEN '1' END)
                           AS normalToGen,
                       COUNT(CASE WHEN BUSINESS_STATES = '50' THEN '1' END)
                           AS normalToRep,
                       COUNT(CASE WHEN BUSINESS_STATES = '60' THEN '1' END)
                           AS normalToFeed
                  FROM I_BS a
                  where 1=1
                       and a.INF_REC_TYPE = '110'
                UNION ALL
                SELECT COUNT(CASE WHEN BUSINESS_STATES = '30' THEN '1' END)
                           AS normalToGen,
                       COUNT(CASE WHEN BUSINESS_STATES = '50' THEN '1' END)
                           AS normalToRep,
                       COUNT(CASE WHEN BUSINESS_STATES = '60' THEN '1' END)
                           AS normalToFeed
                  FROM I_IN_FAL_MMBS_INF b
                  where 1=1
                       and b.INF_REC_TYPE = '120'
                UNION ALL
                SELECT COUNT(CASE WHEN BUSINESS_STATES = '30' THEN '1' END)
                           AS normalToGen,
                       COUNT(CASE WHEN BUSINESS_STATES = '50' THEN '1' END)
                           AS normalToRep,
                       COUNT(CASE WHEN BUSINESS_STATES = '60' THEN '1' END)
                           AS normalToFeed
                  FROM I_IN_ID_EFCT_INF c
                  where 1=1
                  		and c.INF_REC_TYPE ='130'
                UNION ALL
                SELECT COUNT(CASE WHEN BUSINESS_STATES = '30' THEN '1' END)
                           AS normalToGen,
                       COUNT(CASE WHEN BUSINESS_STATES = '50' THEN '1' END)
                           AS normalToRep,
                       COUNT(CASE WHEN BUSINESS_STATES = '60' THEN '1' END)
                           AS normalToFeed
                  FROM I_ACCT_BS d
                  where 1=1
                  		and d.INF_REC_TYPE = '210'
                UNION ALL
                SELECT COUNT(CASE WHEN BUSINESS_STATES = '30' THEN '1' END)
                           AS normalToGen,
                       COUNT(CASE WHEN BUSINESS_STATES = '50' THEN '1' END)
                           AS normalToRep,
                       COUNT(CASE WHEN BUSINESS_STATES = '60' THEN '1' END)
                           AS normalToFeed
                  FROM I_CTRCT_BS e 
                  where 1=1
                  		and e.INF_REC_TYPE = '220'
                UNION ALL
                SELECT COUNT(CASE WHEN BUSINESS_STATES = '30' THEN '1' END)
                           AS normalToGen,
                       COUNT(CASE WHEN BUSINESS_STATES = '50' THEN '1' END)
                           AS normalToRep,
                       COUNT(CASE WHEN BUSINESS_STATES = '60' THEN '1' END)
                           AS normalToFeed
                  FROM I_GUAR_ACCT_BS f 
                  where 1=1
                  		and f.INF_REC_TYPE = '230'
                UNION ALL
                SELECT COUNT(CASE WHEN BUSINESS_STATES = '30' THEN '1' END)
                           AS normalToGen,
                       COUNT(CASE WHEN BUSINESS_STATES = '50' THEN '1' END)
                           AS normalToRep,
                       COUNT(CASE WHEN BUSINESS_STATES = '60' THEN '1' END)
                           AS normalToFeed
                  FROM I_IN_CTF_ITG_INF g 
                  where 1=1
                  		and g.INF_REC_TYPE = '140'
                UNION ALL
                SELECT COUNT(CASE WHEN BUSINESS_STATES = '30' THEN '1' END)
                           AS normalToGen,
                       COUNT(CASE WHEN BUSINESS_STATES = '50' THEN '1' END)
                           AS normalToRep,
                       COUNT(CASE WHEN BUSINESS_STATES = '60' THEN '1' END)
                           AS normalToFeed
                  FROM I_IN_SPC_EVT_DSC_INF h 
                  where 1=1
                  		and h.INF_REC_TYPE = '215'
				      )as tmp_count
    </select>

  	<!-- 李继坤	直接使用原本特殊代码   修改成企业用  -->
  	<select id="getAbnormalPacketToDoCount" parameterType="page" resultType="java.util.HashMap">
        SELECT SUM (normalToGen)      ABNORMALTOGEN,
               SUM (normalToRep)      ABNORMALTOREP,
               SUM (normalToFeed)     ABNORMALTOFEED
          FROM (SELECT COUNT (CASE WHEN BUSINESS_STATES = '30' THEN '1' END)
                           AS normalToGen,
                       COUNT (CASE WHEN BUSINESS_STATES = '50' THEN '1' END)
                           AS normalToRep,
                       COUNT (CASE WHEN BUSINESS_STATES = '60' THEN '1' END)
                           AS normalToFeed
                  FROM E_BS a 
                  where 1=1
                  		and a.INF_REC_TYPE = '310'
				      <if test='pd.COMPANY != null and pd.COMPANY != ""'>
			            and a.COMPANY = #{pd.COMPANY}
			          </if> 
                UNION ALL
                SELECT COUNT (CASE WHEN BUSINESS_STATES = '30' THEN '1' END)
                           AS normalToGen,
                       COUNT (CASE WHEN BUSINESS_STATES = '50' THEN '1' END)
                           AS normalToRep,
                       COUNT (CASE WHEN BUSINESS_STATES = '60' THEN '1' END)
                           AS normalToFeed
                  FROM E_ICDN_RLTP_INF b 
                  where 1=1
                  		and b.INF_REC_TYPE = '350'
				      <if test='pd.COMPANY != null and pd.COMPANY != ""'>
			            and b.COMPANY = #{pd.COMPANY}
			          </if>
                UNION ALL
                SELECT COUNT (CASE WHEN BUSINESS_STATES = '30' THEN '1' END)
                           AS normalToGen,
                       COUNT (CASE WHEN BUSINESS_STATES = '50' THEN '1' END)
                           AS normalToRep,
                       COUNT (CASE WHEN BUSINESS_STATES = '60' THEN '1' END)
                           AS normalToFeed
                  FROM E_ACCT_BS c  
                  where 1=1 
                  		and c.INF_REC_TYPE = '410'
				      <if test='pd.COMPANY != null and pd.COMPANY != ""'>
			            and c.COMPANY = #{pd.COMPANY}
			          </if>
                UNION ALL
                SELECT COUNT (CASE WHEN BUSINESS_STATES = '30' THEN '1' END)
                           AS normalToGen,
                       COUNT (CASE WHEN BUSINESS_STATES = '50' THEN '1' END)
                           AS normalToRep,
                       COUNT (CASE WHEN BUSINESS_STATES = '60' THEN '1' END)
                           AS normalToFeed
                  FROM E_CTRCT_BS d 
                  where 1=1
                  		and d.INF_REC_TYPE = '420'
				      <if test='pd.COMPANY != null and pd.COMPANY != ""'>
			            and d.COMPANY = #{pd.COMPANY}
			          </if>
                UNION ALL
                SELECT COUNT (CASE WHEN BUSINESS_STATES = '30' THEN '1' END)
                           AS normalToGen,
                       COUNT (CASE WHEN BUSINESS_STATES = '50' THEN '1' END)
                           AS normalToRep,
                       COUNT (CASE WHEN BUSINESS_STATES = '60' THEN '1' END)
                           AS normalToFeed
                  FROM E_GUAR_ACCT_BS e  
                  where 1=1
                  		and e.INF_REC_TYPE = '440'
				      <if test='pd.COMPANY != null and pd.COMPANY != ""'>
			            and e.COMPANY = #{pd.COMPANY}
			          </if>
                UNION ALL
                SELECT COUNT (CASE WHEN BUSINESS_STATES = '30' THEN '1' END)
                           AS normalToGen,
                       COUNT (CASE WHEN BUSINESS_STATES = '50' THEN '1' END)
                           AS normalToRep,
                       COUNT (CASE WHEN BUSINESS_STATES = '60' THEN '1' END)
                           AS normalToFeed
                  FROM E_BALANCE_SHEET_BS f 
                  where 1=1
                  		and f.INF_REC_TYPE = '610'
				      <if test='pd.COMPANY != null and pd.COMPANY != ""'>
			            and f.COMPANY = #{pd.COMPANY}
			          </if>
                UNION ALL
                SELECT COUNT (CASE WHEN BUSINESS_STATES = '30' THEN '1' END)
                           AS normalToGen,
                       COUNT (CASE WHEN BUSINESS_STATES = '50' THEN '1' END)
                           AS normalToRep,
                       COUNT (CASE WHEN BUSINESS_STATES = '60' THEN '1' END)
                           AS normalToFeed
                  FROM E_INCOME_STATEMENT g 
                  where 1=1
                  		and g.INF_REC_TYPE = '620'
				      <if test='pd.COMPANY != null and pd.COMPANY != ""'>
			            and g.COMPANY = #{pd.COMPANY}
			          </if>
                UNION ALL
                SELECT COUNT (CASE WHEN BUSINESS_STATES = '30' THEN '1' END)
                           AS normalToGen,
                       COUNT (CASE WHEN BUSINESS_STATES = '50' THEN '1' END)
                           AS normalToRep,
                       COUNT (CASE WHEN BUSINESS_STATES = '60' THEN '1' END)
                           AS normalToFeed
                  FROM E_CASH_FLOWS_BS h 
                  where 1=1
                  		and h.INF_REC_TYPE = '630'
				      <if test='pd.COMPANY != null and pd.COMPANY != ""'>
			            and h.COMPANY = #{pd.COMPANY}
			          </if>
                UNION ALL
                SELECT COUNT (CASE WHEN BUSINESS_STATES = '30' THEN '1' END)
                           AS normalToGen,
                       COUNT (CASE WHEN BUSINESS_STATES = '50' THEN '1' END)
                           AS normalToRep,
                       COUNT (CASE WHEN BUSINESS_STATES = '60' THEN '1' END)
                           AS normalToFeed
                  FROM E_INSTITU_BALANCE_BS i 
                  where 1=1
                  		and i.INF_REC_TYPE = '640'
				      <if test='pd.COMPANY != null and pd.COMPANY != ""'>
			            and i.COMPANY = #{pd.COMPANY}
			          </if>
                UNION ALL
                SELECT COUNT (CASE WHEN BUSINESS_STATES = '30' THEN '1' END)
                           AS normalToGen,
                       COUNT (CASE WHEN BUSINESS_STATES = '50' THEN '1' END)
                           AS normalToRep,
                       COUNT (CASE WHEN BUSINESS_STATES = '60' THEN '1' END)
                           AS normalToFeed
                  FROM E_INCOME_EXPENSE_BS j
                  where 1=1
                  		and j.INF_REC_TYPE = '650'
				      <if test='pd.COMPANY != null and pd.COMPANY != ""'>
			            and j.COMPANY = #{pd.COMPANY}
			          </if>) a
    </select>
    
    		<!-- 特殊 -->
    <!-- <select id="getAbnormalPacketToDoCount" parameterType="page" resultType="java.util.HashMap">
        SELECT SUM (normalToGen)      abnormalToGen,
               SUM (normalToRep)      abnormalToRep,
               SUM (normalToFeed)     abnormalToFeed
          FROM (SELECT COUNT (CASE WHEN BUSINESS_STATES = '30' THEN '1' END)
                           AS normalToGen,
                       COUNT (CASE WHEN BUSINESS_STATES = '50' THEN '1' END)
                           AS normalToRep,
                       COUNT (CASE WHEN BUSINESS_STATES = '60' THEN '1' END)
                           AS normalToFeed
                  FROM I_IN_BS_INF_DLT a 
                  where 1=1
				      <if test='pd.COMPANY != null and pd.COMPANY != ""'>
			            and a.ORG_CODE in (select distinct ORG_CODE from SYS_ORG_VIEW z where z.company = #{pd.COMPANY})
			          </if> 
                UNION ALL
                SELECT COUNT (CASE WHEN BUSINESS_STATES = '30' THEN '1' END)
                           AS normalToGen,
                       COUNT (CASE WHEN BUSINESS_STATES = '50' THEN '1' END)
                           AS normalToRep,
                       COUNT (CASE WHEN BUSINESS_STATES = '60' THEN '1' END)
                           AS normalToFeed
                  FROM I_IN_ID_EFCT_INF_DLT b 
                  where 1=1
				      <if test='pd.COMPANY != null and pd.COMPANY != ""'>
			            and b.ORG_CODE in (select distinct ORG_CODE from SYS_ORG_VIEW z where z.company = #{pd.COMPANY})
			          </if>
                UNION ALL
                SELECT COUNT (CASE WHEN BUSINESS_STATES = '30' THEN '1' END)
                           AS normalToGen,
                       COUNT (CASE WHEN BUSINESS_STATES = '50' THEN '1' END)
                           AS normalToRep,
                       COUNT (CASE WHEN BUSINESS_STATES = '60' THEN '1' END)
                           AS normalToFeed
                  FROM I_IN_ACCT_ID_CAGS_INF c  
                  where 1=1
				      <if test='pd.COMPANY != null and pd.COMPANY != ""'>
			            and c.ORG_CODE in (select distinct ORG_CODE from SYS_ORG_VIEW z where z.company = #{pd.COMPANY})
			          </if>
                UNION ALL
                SELECT COUNT (CASE WHEN BUSINESS_STATES = '30' THEN '1' END)
                           AS normalToGen,
                       COUNT (CASE WHEN BUSINESS_STATES = '50' THEN '1' END)
                           AS normalToRep,
                       COUNT (CASE WHEN BUSINESS_STATES = '60' THEN '1' END)
                           AS normalToFeed
                  FROM I_IN_ACCT_DEL d 
                  where 1=1
				      <if test='pd.COMPANY != null and pd.COMPANY != ""'>
			            and d.ORG_CODE in (select distinct ORG_CODE from SYS_ORG_VIEW z where z.company = #{pd.COMPANY})
			          </if>
                UNION ALL
                SELECT COUNT (CASE WHEN BUSINESS_STATES = '30' THEN '1' END)
                           AS normalToGen,
                       COUNT (CASE WHEN BUSINESS_STATES = '50' THEN '1' END)
                           AS normalToRep,
                       COUNT (CASE WHEN BUSINESS_STATES = '60' THEN '1' END)
                           AS normalToFeed
                  FROM I_IN_ACCT_ENT_DEL e  
                  where 1=1
				      <if test='pd.COMPANY != null and pd.COMPANY != ""'>
			            and e.ORG_CODE in (select distinct ORG_CODE from SYS_ORG_VIEW z where z.company = #{pd.COMPANY})
			          </if>
                UNION ALL
                SELECT COUNT (CASE WHEN BUSINESS_STATES = '30' THEN '1' END)
                           AS normalToGen,
                       COUNT (CASE WHEN BUSINESS_STATES = '50' THEN '1' END)
                           AS normalToRep,
                       COUNT (CASE WHEN BUSINESS_STATES = '60' THEN '1' END)
                           AS normalToFeed
                  FROM I_IN_CTRCTID_CAGS_INF f 
                  where 1=1
				      <if test='pd.COMPANY != null and pd.COMPANY != ""'>
			            and f.ORG_CODE in (select distinct ORG_CODE from SYS_ORG_VIEW z where z.company = #{pd.COMPANY})
			          </if>
                UNION ALL
                SELECT COUNT (CASE WHEN BUSINESS_STATES = '30' THEN '1' END)
                           AS normalToGen,
                       COUNT (CASE WHEN BUSINESS_STATES = '50' THEN '1' END)
                           AS normalToRep,
                       COUNT (CASE WHEN BUSINESS_STATES = '60' THEN '1' END)
                           AS normalToFeed
                  FROM I_IN_CTRCT_DEL g 
                  where 1=1
				      <if test='pd.COMPANY != null and pd.COMPANY != ""'>
			            and g.ORG_CODE in (select distinct ORG_CODE from SYS_ORG_VIEW z where z.company = #{pd.COMPANY})
			          </if>
                UNION ALL
                SELECT COUNT (CASE WHEN BUSINESS_STATES = '30' THEN '1' END)
                           AS normalToGen,
                       COUNT (CASE WHEN BUSINESS_STATES = '50' THEN '1' END)
                           AS normalToRep,
                       COUNT (CASE WHEN BUSINESS_STATES = '60' THEN '1' END)
                           AS normalToFeed
                  FROM I_IN_CTRCT_ENT_DEL h 
                  where 1=1
				      <if test='pd.COMPANY != null and pd.COMPANY != ""'>
			            and h.ORG_CODE in (select distinct ORG_CODE from SYS_ORG_VIEW z where z.company = #{pd.COMPANY})
			          </if>
                UNION ALL
                SELECT COUNT (CASE WHEN BUSINESS_STATES = '30' THEN '1' END)
                           AS normalToGen,
                       COUNT (CASE WHEN BUSINESS_STATES = '50' THEN '1' END)
                           AS normalToRep,
                       COUNT (CASE WHEN BUSINESS_STATES = '60' THEN '1' END)
                           AS normalToFeed
                  FROM I_INSECACCTID_CAGSINF i 
                  where 1=1
				      <if test='pd.COMPANY != null and pd.COMPANY != ""'>
			            and i.ORG_CODE in (select distinct ORG_CODE from SYS_ORG_VIEW z where z.company = #{pd.COMPANY})
			          </if>
                UNION ALL
                SELECT COUNT (CASE WHEN BUSINESS_STATES = '30' THEN '1' END)
                           AS normalToGen,
                       COUNT (CASE WHEN BUSINESS_STATES = '50' THEN '1' END)
                           AS normalToRep,
                       COUNT (CASE WHEN BUSINESS_STATES = '60' THEN '1' END)
                           AS normalToFeed
                  FROM I_IN_SEC_ACCT_DEL j
                  where 1=1
				      <if test='pd.COMPANY != null and pd.COMPANY != ""'>
			            and j.ORG_CODE in (select distinct ORG_CODE from SYS_ORG_VIEW z where z.company = #{pd.COMPANY})
			          </if>
                UNION ALL
                SELECT COUNT (CASE WHEN BUSINESS_STATES = '30' THEN '1' END)
                           AS normalToGen,
                       COUNT (CASE WHEN BUSINESS_STATES = '50' THEN '1' END)
                           AS normalToRep,
                       COUNT (CASE WHEN BUSINESS_STATES = '60' THEN '1' END)
                           AS normalToFeed
                  FROM I_IN_SEC_ACCT_ENT_DEL k 
                  where 1=1
				      <if test='pd.COMPANY != null and pd.COMPANY != ""'>
			            and k.ORG_CODE in (select distinct ORG_CODE from SYS_ORG_VIEW z where z.company = #{pd.COMPANY})
			          </if>
                UNION ALL
                SELECT COUNT (CASE WHEN BUSINESS_STATES = '30' THEN '1' END)
                           AS normalToGen,
                       COUNT (CASE WHEN BUSINESS_STATES = '50' THEN '1' END)
                           AS normalToRep,
                       COUNT (CASE WHEN BUSINESS_STATES = '60' THEN '1' END)
                           AS normalToFeed
                  FROM I_ACCT_BS l 
                  where 1=1
				      <if test='pd.COMPANY != null and pd.COMPANY != ""'>
			            and l.ORG_CODE in (select distinct ORG_CODE from SYS_ORG_VIEW z where z.company = #{pd.COMPANY})
			          </if>
                UNION ALL
                SELECT COUNT (CASE WHEN BUSINESS_STATES = '30' THEN '1' END)
                           AS normalToGen,
                       COUNT (CASE WHEN BUSINESS_STATES = '50' THEN '1' END)
                           AS normalToRep,
                       COUNT (CASE WHEN BUSINESS_STATES = '60' THEN '1' END)
                           AS normalToFeed
                  FROM I_CTRCT_BS m 
                  where 1=1
				      <if test='pd.COMPANY != null and pd.COMPANY != ""'>
			            and m.ORG_CODE in (select distinct ORG_CODE from SYS_ORG_VIEW z where z.company = #{pd.COMPANY})
			          </if>
                UNION ALL 
                SELECT COUNT (CASE WHEN BUSINESS_STATES = '30' THEN '1' END)
                           AS normalToGen,
                       COUNT (CASE WHEN BUSINESS_STATES = '50' THEN '1' END)
                           AS normalToRep,
                       COUNT (CASE WHEN BUSINESS_STATES = '60' THEN '1' END)
                           AS normalToFeed
                  FROM I_GUAR_ACCT_BS n 
                  where 1=1
				      <if test='pd.COMPANY != null and pd.COMPANY != ""'>
			            and n.ORG_CODE in (select distinct ORG_CODE from SYS_ORG_VIEW z where z.company = #{pd.COMPANY})
			          </if>)
    </select> -->
</mapper>
